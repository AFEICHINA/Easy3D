#include "bit_array.h"

#include <iostream>


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Constructor.
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BitArray::BitArray() 
	: mSize(0)
	, mBits(0)
{
	if (sizeof(unsigned int) != 4) {
		std::cerr << "BitArray error: sizeof(unsigned int) != 4" << std::endl;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Constructor.
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BitArray::BitArray(unsigned int nb_bits) 
	: mSize(0)
	, mBits(0)
{
	if (sizeof(unsigned int) != 4) {
		std::cerr << "BitArray error: sizeof(unsigned int) != 4" << std::endl;
		return;
	}

	init(nb_bits);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Destructor.
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BitArray::~BitArray()
{
	if (mBits)
		delete[] mBits;
	mSize = 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Initializes the bit array for a given number of entries
 *	\param		nb_bits		[in] max number of entries in the array
 *	\return		true if success
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool BitArray::init(unsigned int nb_bits)
{
	mSize = BitsToDwords(nb_bits);
	// Get ram for n bits
	if (mBits)
		delete[] mBits;

	mBits = new unsigned int[mSize];
	// Set all bits to 0
	clear();
	return true;
}
