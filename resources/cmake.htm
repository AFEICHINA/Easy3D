<!DOCTYPE html>
<!-- saved from url=(0065)https://preshing.com/20170511/how-to-build-a-cmake-based-project/ -->
<html class="js video maskImage placeholder" lang="en">
<!--<![endif]-->

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <title>How to Build a CMake-Based Project</title>
    <meta name="author" content="Jeff Preshing">



    <meta name="description" content="CMake is a versatile tool that helps you build C/C++ projects on just about any platform you can think of. It&#39;s used by many popular open source projects including LLVM, Qt, KDE …">

    <link rel="image_src" href="./cmake/cmakedemo-preview.png">
    <meta property="og:url" content="https://preshing.com/20170511/how-to-build-a-cmake-based-project">
    <meta property="og:title" content="How to Build a CMake-Based Project">
    <meta property="og:image" content="https://preshing.com/images/cmakedemo-preview.png">
    <meta property="og:description" content="CMake is a versatile tool that helps you build C/C++ projects on just about any platform you can think of. It&#39;s used by many popular open source projects including LLVM, Qt, KDE …">
    <meta name="twitter:card" content="summary">
    <meta name="twitter:site" content="@preshing">
    <meta name="twitter:title" content="How to Build a CMake-Based Project">
    <meta name="twitter:description" content="CMake is a versatile tool that helps you build C/C++ projects on just about any platform you can think of. It&#39;s used by many popular open source projects including LLVM, Qt, KDE …">
    <meta name="twitter:image" content="https://preshing.com/images/cmakedemo-preview.png">



    <!-- http://t.co/dKP3o1e -->
    <meta name="HandheldFriendly" content="True">
    <meta name="MobileOptimized" content="320">
    <meta name="viewport" content="width=device-width,minimum-scale=1,maximum-scale=1">

    <link rel="canonical" href="https://preshing.com/20170511/how-to-build-a-cmake-based-project">
    <link href="https://preshing.com/favicon.png" rel="icon">
    <link href="./cmake/screen.css" media="screen, projection" rel="stylesheet" type="text/css">
    <link href="https://preshing.com/feed" rel="alternate" title="Preshing on Programming" type="application/atom+xml">
    <script type="text/javascript" async="" src="./cmake/ga.js"></script>
    <script src="./cmake/modernizr-2.0.js"></script>
    <script src="./cmake/jquery.min.js"></script>
    <script>
        !window.jQuery && document.write(unescape('%3Cscript src="./javascripts/lib/jquery.min.js"%3E%3C/script%3E'))

    </script>
    <script src="./cmake/octopress.js" type="text/javascript"></script>

    <script type="text/javascript" src="./cmake/MathJax.js"></script>


    <script type="text/javascript">
        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-44017752-1']);
        _gaq.push(['_trackPageview']);

        (function() {
            var ga = document.createElement('script');
            ga.type = 'text/javascript';
            ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0];
            s.parentNode.insertBefore(ga, s);
        })();

    </script>


    <style type="text/css">
        .MathJax_Hover_Frame {
            border-radius: .25em;
            -webkit-border-radius: .25em;
            -moz-border-radius: .25em;
            -khtml-border-radius: .25em;
            box-shadow: 0px 0px 15px #83A;
            -webkit-box-shadow: 0px 0px 15px #83A;
            -moz-box-shadow: 0px 0px 15px #83A;
            -khtml-box-shadow: 0px 0px 15px #83A;
            border: 1px solid #A6D ! important;
            display: inline-block;
            position: absolute
        }

        .MathJax_Menu_Button .MathJax_Hover_Arrow {
            position: absolute;
            cursor: pointer;
            display: inline-block;
            border: 2px solid #AAA;
            border-radius: 4px;
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            -khtml-border-radius: 4px;
            font-family: 'Courier New', Courier;
            font-size: 9px;
            color: #F0F0F0
        }

        .MathJax_Menu_Button .MathJax_Hover_Arrow span {
            display: block;
            background-color: #AAA;
            border: 1px solid;
            border-radius: 3px;
            line-height: 0;
            padding: 4px
        }

        .MathJax_Hover_Arrow:hover {
            color: white !important;
            border: 2px solid #CCC !important
        }

        .MathJax_Hover_Arrow:hover span {
            background-color: #CCC !important
        }

    </style>
    <style type="text/css">
        #MathJax_About {
            position: fixed;
            left: 50%;
            width: auto;
            text-align: center;
            border: 3px outset;
            padding: 1em 2em;
            background-color: #DDDDDD;
            color: black;
            cursor: default;
            font-family: message-box;
            font-size: 120%;
            font-style: normal;
            text-indent: 0;
            text-transform: none;
            line-height: normal;
            letter-spacing: normal;
            word-spacing: normal;
            word-wrap: normal;
            white-space: nowrap;
            float: none;
            z-index: 201;
            border-radius: 15px;
            -webkit-border-radius: 15px;
            -moz-border-radius: 15px;
            -khtml-border-radius: 15px;
            box-shadow: 0px 10px 20px #808080;
            -webkit-box-shadow: 0px 10px 20px #808080;
            -moz-box-shadow: 0px 10px 20px #808080;
            -khtml-box-shadow: 0px 10px 20px #808080;
            filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')
        }

        #MathJax_About.MathJax_MousePost {
            outline: none
        }

        .MathJax_Menu {
            position: absolute;
            background-color: white;
            color: black;
            width: auto;
            padding: 5px 0px;
            border: 1px solid #CCCCCC;
            margin: 0;
            cursor: default;
            font: menu;
            text-align: left;
            text-indent: 0;
            text-transform: none;
            line-height: normal;
            letter-spacing: normal;
            word-spacing: normal;
            word-wrap: normal;
            white-space: nowrap;
            float: none;
            z-index: 201;
            border-radius: 5px;
            -webkit-border-radius: 5px;
            -moz-border-radius: 5px;
            -khtml-border-radius: 5px;
            box-shadow: 0px 10px 20px #808080;
            -webkit-box-shadow: 0px 10px 20px #808080;
            -moz-box-shadow: 0px 10px 20px #808080;
            -khtml-box-shadow: 0px 10px 20px #808080;
            filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')
        }

        .MathJax_MenuItem {
            padding: 1px 2em;
            background: transparent
        }

        .MathJax_MenuArrow {
            position: absolute;
            right: .5em;
            padding-top: .25em;
            color: #666666;
            font-size: .75em
        }

        .MathJax_MenuActive .MathJax_MenuArrow {
            color: white
        }

        .MathJax_MenuArrow.RTL {
            left: .5em;
            right: auto
        }

        .MathJax_MenuCheck {
            position: absolute;
            left: .7em
        }

        .MathJax_MenuCheck.RTL {
            right: .7em;
            left: auto
        }

        .MathJax_MenuRadioCheck {
            position: absolute;
            left: .7em
        }

        .MathJax_MenuRadioCheck.RTL {
            right: .7em;
            left: auto
        }

        .MathJax_MenuLabel {
            padding: 1px 2em 3px 1.33em;
            font-style: italic
        }

        .MathJax_MenuRule {
            border-top: 1px solid #DDDDDD;
            margin: 4px 3px
        }

        .MathJax_MenuDisabled {
            color: GrayText
        }

        .MathJax_MenuActive {
            background-color: #606872;
            color: white
        }

        .MathJax_MenuDisabled:focus,
        .MathJax_MenuLabel:focus {
            background-color: #E8E8E8
        }

        .MathJax_ContextMenu:focus {
            outline: none
        }

        .MathJax_ContextMenu .MathJax_MenuItem:focus {
            outline: none
        }

        #MathJax_AboutClose {
            top: .2em;
            right: .2em
        }

        .MathJax_Menu .MathJax_MenuClose {
            top: -10px;
            left: -10px
        }

        .MathJax_MenuClose {
            position: absolute;
            cursor: pointer;
            display: inline-block;
            border: 2px solid #AAA;
            border-radius: 18px;
            -webkit-border-radius: 18px;
            -moz-border-radius: 18px;
            -khtml-border-radius: 18px;
            font-family: 'Courier New', Courier;
            font-size: 24px;
            color: #F0F0F0
        }

        .MathJax_MenuClose span {
            display: block;
            background-color: #AAA;
            border: 1.5px solid;
            border-radius: 18px;
            -webkit-border-radius: 18px;
            -moz-border-radius: 18px;
            -khtml-border-radius: 18px;
            line-height: 0;
            padding: 8px 0 6px
        }

        .MathJax_MenuClose:hover {
            color: white !important;
            border: 2px solid #CCC !important
        }

        .MathJax_MenuClose:hover span {
            background-color: #CCC !important
        }

        .MathJax_MenuClose:hover:focus {
            outline: none
        }

    </style>
    <style type="text/css">
        .MathJax_Preview .MJXf-math {
            color: inherit !important
        }

    </style>
    <style type="text/css">
        .MJX_Assistive_MathML {
            position: absolute !important;
            top: 0;
            left: 0;
            clip: rect(1px, 1px, 1px, 1px);
            padding: 1px 0 0 0 !important;
            border: 0 !important;
            height: 1px !important;
            width: 1px !important;
            overflow: hidden !important;
            display: block !important;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none
        }

        .MJX_Assistive_MathML.MJX_Assistive_MathML_Block {
            width: 100% !important
        }

    </style>
    <style type="text/css">
        #MathJax_Zoom {
            position: absolute;
            background-color: #F0F0F0;
            overflow: auto;
            display: block;
            z-index: 301;
            padding: .5em;
            border: 1px solid black;
            margin: 0;
            font-weight: normal;
            font-style: normal;
            text-align: left;
            text-indent: 0;
            text-transform: none;
            line-height: normal;
            letter-spacing: normal;
            word-spacing: normal;
            word-wrap: normal;
            white-space: nowrap;
            float: none;
            -webkit-box-sizing: content-box;
            -moz-box-sizing: content-box;
            box-sizing: content-box;
            box-shadow: 5px 5px 15px #AAAAAA;
            -webkit-box-shadow: 5px 5px 15px #AAAAAA;
            -moz-box-shadow: 5px 5px 15px #AAAAAA;
            -khtml-box-shadow: 5px 5px 15px #AAAAAA;
            filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')
        }

        #MathJax_ZoomOverlay {
            position: absolute;
            left: 0;
            top: 0;
            z-index: 300;
            display: inline-block;
            width: 100%;
            height: 100%;
            border: 0;
            padding: 0;
            margin: 0;
            background-color: white;
            opacity: 0;
            filter: alpha(opacity=0)
        }

        #MathJax_ZoomFrame {
            position: relative;
            display: inline-block;
            height: 0;
            width: 0
        }

        #MathJax_ZoomEventTrap {
            position: absolute;
            left: 0;
            top: 0;
            z-index: 302;
            display: inline-block;
            border: 0;
            padding: 0;
            margin: 0;
            background-color: white;
            opacity: 0;
            filter: alpha(opacity=0)
        }

    </style>
    <style type="text/css">
        .MathJax_Preview {
            color: #888
        }

        #MathJax_Message {
            position: fixed;
            left: 1em;
            bottom: 1.5em;
            background-color: #E6E6E6;
            border: 1px solid #959595;
            margin: 0px;
            padding: 2px 8px;
            z-index: 102;
            color: black;
            font-size: 80%;
            width: auto;
            white-space: nowrap
        }

        #MathJax_MSIE_Frame {
            position: absolute;
            top: 0;
            left: 0;
            width: 0px;
            z-index: 101;
            border: 0px;
            margin: 0px;
            padding: 0px
        }

        .MathJax_Error {
            color: #CC0000;
            font-style: italic
        }

    </style>
    <script type="text/javascript" src="./cmake/genericCommentWrapper2.php"></script>
    <style type="text/css">
        .MJXp-script {
            font-size: .8em
        }

        .MJXp-right {
            -webkit-transform-origin: right;
            -moz-transform-origin: right;
            -ms-transform-origin: right;
            -o-transform-origin: right;
            transform-origin: right
        }

        .MJXp-bold {
            font-weight: bold
        }

        .MJXp-italic {
            font-style: italic
        }

        .MJXp-scr {
            font-family: MathJax_Script, 'Times New Roman', Times, STIXGeneral, serif
        }

        .MJXp-frak {
            font-family: MathJax_Fraktur, 'Times New Roman', Times, STIXGeneral, serif
        }

        .MJXp-sf {
            font-family: MathJax_SansSerif, 'Times New Roman', Times, STIXGeneral, serif
        }

        .MJXp-cal {
            font-family: MathJax_Caligraphic, 'Times New Roman', Times, STIXGeneral, serif
        }

        .MJXp-mono {
            font-family: MathJax_Typewriter, 'Times New Roman', Times, STIXGeneral, serif
        }

        .MJXp-largeop {
            font-size: 150%
        }

        .MJXp-largeop.MJXp-int {
            vertical-align: -.2em
        }

        .MJXp-math {
            display: inline-block;
            line-height: 1.2;
            text-indent: 0;
            font-family: 'Times New Roman', Times, STIXGeneral, serif;
            white-space: nowrap;
            border-collapse: collapse
        }

        .MJXp-display {
            display: block;
            text-align: center;
            margin: 1em 0
        }

        .MJXp-math span {
            display: inline-block
        }

        .MJXp-box {
            display: block !important;
            text-align: center
        }

        .MJXp-box:after {
            content: " "
        }

        .MJXp-rule {
            display: block !important;
            margin-top: .1em
        }

        .MJXp-char {
            display: block !important
        }

        .MJXp-mo {
            margin: 0 .15em
        }

        .MJXp-mfrac {
            margin: 0 .125em;
            vertical-align: .25em
        }

        .MJXp-denom {
            display: inline-table !important;
            width: 100%
        }

        .MJXp-denom>* {
            display: table-row !important
        }

        .MJXp-surd {
            vertical-align: top
        }

        .MJXp-surd>* {
            display: block !important
        }

        .MJXp-script-box>* {
            display: table !important;
            height: 50%
        }

        .MJXp-script-box>*>* {
            display: table-cell !important;
            vertical-align: top
        }

        .MJXp-script-box>*:last-child>* {
            vertical-align: bottom
        }

        .MJXp-script-box>*>*>* {
            display: block !important
        }

        .MJXp-mphantom {
            visibility: hidden
        }

        .MJXp-munderover {
            display: inline-table !important
        }

        .MJXp-over {
            display: inline-block !important;
            text-align: center
        }

        .MJXp-over>* {
            display: block !important
        }

        .MJXp-munderover>* {
            display: table-row !important
        }

        .MJXp-mtable {
            vertical-align: .25em;
            margin: 0 .125em
        }

        .MJXp-mtable>* {
            display: inline-table !important;
            vertical-align: middle
        }

        .MJXp-mtr {
            display: table-row !important
        }

        .MJXp-mtd {
            display: table-cell !important;
            text-align: center;
            padding: .5em 0 0 .5em
        }

        .MJXp-mtr>.MJXp-mtd:first-child {
            padding-left: 0
        }

        .MJXp-mtr:first-child>.MJXp-mtd {
            padding-top: 0
        }

        .MJXp-mlabeledtr {
            display: table-row !important
        }

        .MJXp-mlabeledtr>.MJXp-mtd:first-child {
            padding-left: 0
        }

        .MJXp-mlabeledtr:first-child>.MJXp-mtd {
            padding-top: 0
        }

        .MJXp-merror {
            background-color: #FFFF88;
            color: #CC0000;
            border: 1px solid #CC0000;
            padding: 1px 3px;
            font-style: normal;
            font-size: 90%
        }

        .MJXp-scale0 {
            -webkit-transform: scaleX(.0);
            -moz-transform: scaleX(.0);
            -ms-transform: scaleX(.0);
            -o-transform: scaleX(.0);
            transform: scaleX(.0)
        }

        .MJXp-scale1 {
            -webkit-transform: scaleX(.1);
            -moz-transform: scaleX(.1);
            -ms-transform: scaleX(.1);
            -o-transform: scaleX(.1);
            transform: scaleX(.1)
        }

        .MJXp-scale2 {
            -webkit-transform: scaleX(.2);
            -moz-transform: scaleX(.2);
            -ms-transform: scaleX(.2);
            -o-transform: scaleX(.2);
            transform: scaleX(.2)
        }

        .MJXp-scale3 {
            -webkit-transform: scaleX(.3);
            -moz-transform: scaleX(.3);
            -ms-transform: scaleX(.3);
            -o-transform: scaleX(.3);
            transform: scaleX(.3)
        }

        .MJXp-scale4 {
            -webkit-transform: scaleX(.4);
            -moz-transform: scaleX(.4);
            -ms-transform: scaleX(.4);
            -o-transform: scaleX(.4);
            transform: scaleX(.4)
        }

        .MJXp-scale5 {
            -webkit-transform: scaleX(.5);
            -moz-transform: scaleX(.5);
            -ms-transform: scaleX(.5);
            -o-transform: scaleX(.5);
            transform: scaleX(.5)
        }

        .MJXp-scale6 {
            -webkit-transform: scaleX(.6);
            -moz-transform: scaleX(.6);
            -ms-transform: scaleX(.6);
            -o-transform: scaleX(.6);
            transform: scaleX(.6)
        }

        .MJXp-scale7 {
            -webkit-transform: scaleX(.7);
            -moz-transform: scaleX(.7);
            -ms-transform: scaleX(.7);
            -o-transform: scaleX(.7);
            transform: scaleX(.7)
        }

        .MJXp-scale8 {
            -webkit-transform: scaleX(.8);
            -moz-transform: scaleX(.8);
            -ms-transform: scaleX(.8);
            -o-transform: scaleX(.8);
            transform: scaleX(.8)
        }

        .MJXp-scale9 {
            -webkit-transform: scaleX(.9);
            -moz-transform: scaleX(.9);
            -ms-transform: scaleX(.9);
            -o-transform: scaleX(.9);
            transform: scaleX(.9)
        }

        .MathJax_PHTML .noError {
            vertical-align: ;
            font-size: 90%;
            text-align: left;
            color: black;
            padding: 1px 3px;
            border: 1px solid
        }

    </style>
</head>

<body>
    <div id="MathJax_Message" style="display: none;"></div>
    <div id="main">
        <div id="content">
            <div>
                <article class="hentry" role="article">

                    <header>

                        <p class="meta">
                            <time datetime="2017-05-11T08:30:00-04:00" pubdate="" data-updated="true">May 11, 2017</time>
                        </p>
                        <p>
                            The original article appeared at <a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/">https://preshing.com/20170511/how-to-build-a-cmake-based-project/</a>.
                        </p>


                        <h1 class="entry-title">How to Build a CMake-Based Project</h1>

                    </header>


                    <div class="entry-content">
                        <p><a href="https://cmake.org/">CMake</a> is a versatile tool that helps you build C/C++ projects on just about any platform you can think of. It’s used by many popular open source projects including LLVM, Qt, KDE and Blender.</p>

                        <p>All CMake-based projects contain a script named <code>CMakeLists.txt</code>, and this post is meant as a guide for configuring and building such projects. This post won’t show you how to <em>write</em> a CMake script – that’s getting ahead of things, in my opinion.</p>

                        <p>As an example, I’ve prepared a <a href="https://github.com/preshing/CMakeDemo">CMake-based project</a> that uses SDL2 and OpenGL to render a spinning 3D logo. You can build it on Windows, MacOS or Linux.</p>

                        <p><a href="https://github.com/preshing/CMakeDemo"><img class="center" src="./cmake/cmakedemo-github.png"></a>
                            <a href="https://github.com/preshing/CMakeDemo"><img class="center" src="./cmake/cmakedemo-preview.png"></a>
                        </p>

                        <!--more-->
                        <div class="panel_note">
                            <p>The information here applies to any CMake-based project, so feel free to skip ahead to any section. However, I recommend reading the first two sections first.</p>
                            <ul>
                                <li><a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#the-source-and-binary-folders">The Source and Binary Folders</a></li>
                                <li><a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#the-configure-and-generate-steps">The Configure and Generate Steps</a></li>
                                <li><a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#running-cmake-from-the-command-line">Running CMake from the Command Line</a></li>
                                <li><a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#running-cmake-gui">Running cmake-gui</a></li>
                                <li><a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#running-ccmake">Running ccmake</a></li>
                                <li><a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#building-with-unix-makefiles">Building with Unix Makefiles</a></li>
                                <li><a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#building-with-visual-studio">Building with Visual Studio</a></li>
                                <li><a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#building-with-xcode">Building with Xcode</a></li>
                                <li><a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#building-with-qt-creator">Building with Qt Creator</a></li>
                                <li><a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#other-cmake-features">Other CMake Features</a></li>
                            </ul>
                        </div>

                        <p>If you don’t have CMake yet, there are installers and binary distributions <a href="https://cmake.org/download/">on the CMake website</a>. In Unix-like environments, including Linux, it’s usually available through the system package manager. You can also install it through <a href="https://www.macports.org/">MacPorts</a>, <a href="https://brew.sh/">Homebrew</a>, <a href="https://www.cygwin.com/">Cygwin</a> or <a href="http://www.msys2.org/">MSYS2</a>.</p>

                        <h2 id="the-source-and-binary-folders">The Source and Binary Folders</h2>

                        <p>CMake generates <strong>build pipelines</strong>. A build pipeline might be a Visual Studio <code>.sln</code> file, an Xcode <code>.xcodeproj</code> or a Unix-style <code>Makefile</code>. It can also take several other forms.</p>

                        <p>To generate a build pipeline, CMake needs to know the <strong>source</strong> and <strong>binary</strong> folders. The source folder is the one containing <code>CMakeLists.txt</code>. The binary folder is where CMake generates the build pipeline. You can create the binary folder anywhere you want. A common practice is to create a subdirectory <code>build</code> beneath <code>CMakeLists.txt</code>.</p>

                        <p><img class="center" src="./cmake/cmake-concepts.png"></p>

                        <p>By keeping the binary folder separate from the source, you can delete the binary folder at any time to get back to a clean slate. You can even create several binary folders, side-by-side, that use different build systems or configuration options.</p>

                        <p>The <strong>cache</strong> is an important concept. It’s a single text file in the binary folder named <code>CMakeCache.txt</code>. This is where <strong>cache variables</strong> are stored. Cache variables include user-configurable options defined by the project such as <a href="https://github.com/preshing/CMakeDemo">CMakeDemo</a>’s <code>DEMO_ENABLE_MULTISAMPLE</code> option (explained later), and precomputed information to help speed up CMake runs. (You can, and will, re-run CMake several times on the same binary folder.)</p>

                        <p>You aren’t meant to submit the generated build pipeline to source control, as it usually contains paths that are hardcoded to the local filesystem. Instead, simply re-run CMake each time you clone the project to a new folder. I usually add the rule <code>*build*/</code> to my <code>.gitignore</code> files.</p>

                        <h2 id="the-configure-and-generate-steps">The Configure and Generate Steps</h2>

                        <p>As you’ll see in the following sections, there are several ways to run CMake. No matter how you run it, it performs two steps: the <strong>configure</strong> step and the <strong>generate</strong> step.</p>

                        <p><img class="center" src="./cmake/cmake-simple-flowchart.png"></p>

                        <p>The <code>CMakeLists.txt</code> script is executed during the configure step. This script is responsible for defining <strong>targets</strong>. Each target represents an executable, library, or some other output of the build pipeline.</p>

                        <p>If the configure step succeeds – meaning <code>CMakeLists.txt</code> completed without errors – CMake will generate a build pipeline using the targets defined by the script. The type of build pipeline generated depends on the type of <strong>generator</strong> used, as explained in the following sections.</p>

                        <p>Additional things may happen during the configure step, depending on the contents of <code>CMakeLists.txt</code>. For example, in our sample <a href="https://github.com/preshing/CMakeDemo">CMakeDemo</a> project, the configure step also:</p>

                        <ul>
                            <li>Finds the header files and libraries for SDL2 and OpenGL.</li>
                            <li>Generates a header file <code>demo-config.h</code> in the binary folder, which will be included from C++ code.</li>
                        </ul>

                        <p><img class="center" src="./cmake/cmake-linux-config-steps.png"></p>

                        <p>In a more sophisticated project, the configure step might also test the availability of system functions (as a traditional Unix <code>configure</code> script would), or define a special “install” target (to help create a distributable package). If you re-run CMake on the same binary folder, many of the slow steps are skipped during subsequent runs, thanks to the cache.</p>

                        <h2 id="running-cmake-from-the-command-line">Running CMake from the Command Line</h2>

                        <p>Before running CMake, make sure you have the required dependencies for your project and platform. For <a href="https://github.com/preshing/CMakeDemo">CMakeDemo</a> on Windows, you can run <code>setup-win32.py</code>. For other platforms, check the <a href="https://github.com/preshing/CMakeDemo/blob/master/README.md">README</a>.</p>

                        <p>You’ll often want to tell CMake which generator to use. For a list of available generators, run <code>cmake --help</code>.</p>

                        <p><img class="center" src="./cmake/cmake-generators.png"></p>

                        <p>Create the binary folder, <code>cd</code> to that folder, then run <code>cmake</code>, specifying the path to the source folder on the command line. Specify the desired generator using the <code>-G</code> option. If you omit the <code>-G</code> option, <code>cmake</code> will choose one for you. (If you don’t like its choice, you can always delete the binary folder and start over.)</p>

                        <pre><code>mkdir build
cd build
cmake -G "Visual Studio 15 2017" ..
</code></pre>

                        <p>If there are project-specific configuration options, you can specify those on the command line as well. For example, the CMakeDemo project has a configuration option <code>DEMO_ENABLE_MULTISAMPLE</code> that defaults to 0. You can enable this configuration option by specifying <code>-DDEMO_ENABLE_MULTISAMPLE=1</code> on the <code>cmake</code> command line. Changing the value of <code>DEMO_ENABLE_MULTISAMPLE</code> will change the contents of <code>demo-config.h</code>, a header file that’s generated by <code>CMakeLists.txt</code> during the configure step. The value of this variable is also stored in the cache so that it persists during subsequent runs. Other projects have different configuration options.</p>

                        <pre><code>cmake -G "Visual Studio 15 2017" -DDEMO_ENABLE_MULTISAMPLE=1 ..
</code></pre>

                        <p>If you change your mind about the value of <code>DEMO_ENABLE_MULTISAMPLE</code>, you can re-run CMake at any time. On subsequent runs, instead of passing the source folder path to the <code>cmake</code> command line, you can simply specify the path to the existing binary folder. CMake will find all previous settings in the cache, such as the choice of generator, and re-use them.</p>

                        <pre><code>cmake -DDEMO_ENABLE_MULTISAMPLE=0 .
</code></pre>

                        <p>You can view project-defined cache variables by running <code>cmake -L -N .</code>. Here you can see <a href="https://github.com/preshing/CMakeDemo">CMakeDemo</a>’s <code>DEMO_ENABLE_MULTISAMPLE</code> option left at its default 0 value:</p>

                        <p><img class="center" src="./cmake/cmake-cl-cache-vars.png"></p>

                        <h2 id="running-cmake-gui">Running cmake-gui</h2>

                        <p>I prefer the <a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#running-cmake-from-the-command-line">command line</a>, but CMake also has a GUI. The GUI offers an interactive way to set cache variables. Again, make sure to install your project’s required dependencies first.</p>

                        <p>To use it, run <code>cmake-gui</code>, fill in the source and binary folder paths, then click Configure.</p>

                        <p><img class="center" src="./cmake/cmake-gui.png"></p>

                        <p>If the binary folder doesn’t exist, CMake will prompt you to create it. It will then ask you to select a generator.</p>

                        <p><img class="center" src="./cmake/cmake-choose-generator.png"></p>

                        <p>After the initial configure step, the GUI will show you a list of cache variables, similar to the list you see when you run <code>cmake -L -N .</code> from the command line. New cache variables are highlighted in red. (In this case, that’s all of them.) If you click Configure again, the red highlights will disappear, since the variables are no longer considered new.</p>

                        <p><img class="center" src="./cmake/cmake-gui-options.png"></p>

                        <p>The idea is that if you change a cache variable, then click Configure, new cache variables might appear as a result of your change. The red highlights are meant to help you see any new variables, customize them, then click Configure again. In practice, changing a value doesn’t introduce new cache variables very often. It depends how the project’s <code>CMakeLists.txt</code> script was written.</p>

                        <p>Once you’ve customized the cache variables to your liking, click Generate. This will generate the build pipeline in the binary folder. You can then use it to build your project.</p>

                        <h2 id="running-ccmake">Running ccmake</h2>

                        <p><code>ccmake</code> is the console equivalent to <code>cmake-gui</code>. Like the GUI, it lets you set cache variables interactively. It can be handy when running CMake on a remote machine, or if you just like using the console. If you can figure out the <a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#running-cmake-gui">CMake GUI</a>, you can figure out <code>ccmake</code>.</p>

                        <p><img class="center" src="./cmake/ccmake-grab.png"></p>

                        <h2 id="building-with-unix-makefiles">Building with Unix Makefiles</h2>

                        <p>CMake generates a Unix makefile by default when <a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#running-cmake-from-the-command-line">run from the command line</a> in a Unix-like environment. Of course, you can generate makefiles explicitly using the <code>-G</code> option. When generating a makefile, you should also define the <code>CMAKE_BUILD_TYPE</code> variable. Assuming the source folder is the parent:</p>

                        <pre><code>cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug ..
</code></pre>

                        <p>You should define the <code>CMAKE_BUILD_TYPE</code> variable because makefiles generated by CMake are <strong>single-configuration</strong>. Unlike a Visual Studio solution, you can’t use the same makefile to build multiple configurations such as Debug and Release. A single makefile is capable of building <em>exactly one</em> build type. By default, the available types are Debug, MinSizeRel, RelWithDebInfo and Release. Watch out – if you forget to define <code>CMAKE_BUILD_TYPE</code>, you’ll probably get an unoptimized build without debug information, which is useless. To change to a different build type, you must re-run CMake and generate a new makefile. </p>

                        <p>Personally, I also find CMake’s default Release configuration useless because it doesn’t generate any debug information. If you’ve ever opened a crash dump or fixed a bug in Release, you’ll appreciate the availability of debug information, even in an optimized build. That’s why, in my other CMake projects, I usually delete the Release configuration from <code>CMakeLists.txt</code> and use RelWithDebInfo instead.</p>

                        <p>Once the makefile exists, you can actually build your project by running <code>make</code>. By default, <code>make</code> will build every target that was defined by <code>CMakeLists.txt</code>. In <a href="https://github.com/preshing/CMakeDemo">CMakeDemo</a>’s case, there’s only one target. You can also build a specific target by passing its name to <code>make</code>:</p>

                        <pre><code>make CMakeDemo
</code></pre>

                        <p>The makefile generated by CMake detects header file dependencies automatically, so editing a single header file won’t necessarily rebuild the entire project. You can also parallelize the build by passing <code>-j 4</code> (or a higher number) to <code>make</code>.</p>

                        <p>CMake also exposes a <a href="https://ninja-build.org/">Ninja</a> generator. Ninja is similar to <code>make</code>, but faster. It generates a <code>build.ninja</code> file, which is similar to a <code>Makefile</code>. The Ninja generator is also single-configuration. Ninja’s <code>-j</code> option autodetects the number of available CPUs.</p>

                        <h2 id="building-with-visual-studio">Building with Visual Studio</h2>

                        <p>We’ll generate a Visual Studio <code>.sln</code> file from the <a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#running-cmake-from-the-command-line">CMake command line</a>. If you have several versions of Visual Studio installed, you’ll want to tell <code>cmake</code> which version to use. Again, assuming that the source folder is the parent:</p>

                        <pre><code>cmake -G "Visual Studio 15 2017" ..
</code></pre>

                        <p>The above command line will generate a Visual Studio <code>.sln</code> file for a 32-bit build. There are no multiplatform <code>.sln</code> files using CMake, so for a 64-bit build, you must specify the 64-bit generator:</p>

                        <pre><code>cmake -G "Visual Studio 15 2017 Win64" ..
</code></pre>

                        <p>Open the resulting <code>.sln</code> file in Visual Studio, go to the Solution Explorer panel, right-click the target you want to run, then choose “Set as Startup Project”. Build and run as you normally would.</p>

                        <p><img class="center" src="./cmake/cmake-sln-explorer.png"></p>

                        <p>Note that CMake adds two additional targets to the solution: ALL_BUILD and ZERO_CHECK. ZERO_CHECK automatically re-runs CMake when it detects a change to <code>CMakeLists.txt</code>. ALL_BUILD usually builds all other targets, making it somewhat redundant in Visual Studio. If you’re used to setting up your solutions a certain way, it might seem annoying to have these extra targets in your <code>.sln</code> file, but you get used to it. CMake lets you organize targets and source files into folders, but I didn’t demonstrate that in the <a href="https://github.com/preshing/CMakeDemo">CMakeDemo</a> sample.</p>

                        <p>Like any Visual Studio solution, you can change build type at any time from the Solution Configuration drop-down list. The <a href="https://github.com/preshing/CMakeDemo">CMakeDemo</a> sample uses CMake’s default set of build types, shown below. Again, I find the default Release configuration rather useless as it doesn’t produce any debug information. In my other CMake projects, I usually delete the Release configuration from <code>CMakeLists.txt</code> and use RelWithDebInfo instead.</p>

                        <p><img class="center" src="./cmake/cmake-vs-configs.png"></p>

                        <h3 id="built-in-cmake-support-in-visual-studio-2017">Built-In CMake Support in Visual Studio 2017</h3>

                        <p>In Visual Studio 2017, Microsoft introduced <a href="https://blogs.msdn.microsoft.com/vcblog/2016/10/05/cmake-support-in-visual-studio/">another way to use CMake</a> with Visual Studio. You can now open the source folder containing <code>CMakeLists.txt</code> from Visual Studio’s File → Open → Folder menu. This new method avoids creating intermediate <code>.sln</code> and <code>.vcxproj</code> files. It also exposes 32-bit and 64-bit builds in the same workspace. It’s a nice idea that, in my opinion, falls short for a few reasons:</p>

                        <ul>
                            <li>If there are any source files <em>outside</em> the source folder containing <code>CMakeLists.txt</code>, they won’t appear in the Solution Explorer.</li>
                            <li>The familiar C/C++ Property Pages are no longer available.</li>
                            <li>Cache variables can only be set by editing a JSON file, which is pretty unintuitive for a Visual IDE.</li>
                        </ul>

                        <p>I’m not really a fan. For now, I intend to keep generating <code>.sln</code> files by hand using CMake.</p>

                        <h2 id="building-with-xcode">Building with Xcode</h2>

                        <p>The CMake website publishes a <a href="https://cmake.org/download/">binary distribution</a> of CMake for MacOS as a <code>.dmg</code> file. The <code>.dmg</code> file contains an app that you can drag &amp; drop to your Applications folder. Note that if you install CMake this way, <code>cmake</code> won’t be available from the command line unless you create a link to <code>/Applications/CMake.app/Contents/bin/cmake</code> somewhere. I prefer installing CMake from <a href="https://www.macports.org/">MacPorts</a> because it sets up the command line for you, and because dependencies like SDL2 can be installed the same way.</p>

                        <p>Specify the Xcode generator from the <a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#running-cmake-from-the-command-line">CMake command line</a>. Again, assuming that the source folder is the parent:</p>

                        <pre><code>cmake -G "Xcode" ..
</code></pre>

                        <p>This will create an <code>.xcodeproj</code> folder. Open it in Xcode. (I tested in Xcode 8.3.1.) In the Xcode toolbar, click the “active scheme” drop-down list and select the target you want to run.</p>

                        <p><img class="center" src="./cmake/cmake-xcode-target.png"></p>

                        <p>After that, click “Edit Scheme…” from the same drop-down list, then choose a build configuration under Run → Info. Again, I don’t recommend CMake’s default Release configuration, as the lack of debug information limits its usefulness.</p>

                        <p><img class="center" src="./cmake/cmake-xcode-config.png"></p>

                        <p>Finally, build from the Product → Build menu (or the ⌘B shortcut), run using Product → Run (or ⌘R), or click the big play button in the toolbar.</p>

                        <p>It’s possible to make CMake generate an Xcode project that builds a MacOS bundle or framework, but I didn’t demonstrate that in the <a href="https://github.com/preshing/CMakeDemo">CMakeDemo</a> project.</p>

                        <h2 id="building-with-qt-creator">Building with Qt Creator</h2>

                        <p>Qt Creator provides built-in support for CMake using the <a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#building-with-unix-makefiles">Makefile or Ninja generator</a> under the hood. I tested the following steps in Qt Creator 3.5.1.</p>

                        <p>In Qt Creator, go to File → Open File or Project… and choose <code>CMakeLists.txt</code> from the source folder you want to build.</p>

                        <p><img class="center" src="./cmake/cmake-qt-choose-folder.png"></p>

                        <p>Qt Creator will prompt you for the location of the binary folder, calling it the “build directory”. By default, it suggests a path adjacent to the source folder. You can change this location if you want.</p>

                        <p><img class="center" src="./cmake/cmake-qt-build-location.png"></p>

                        <p>When prompted to run CMake, make sure to define the <code>CMAKE_BUILD_TYPE</code> variable since the Makefile generator is <a href="https://preshing.com/20170511/how-to-build-a-cmake-based-project/#building-with-unix-makefiles">single-configuration</a>. You can also specify project-specific variables here, such as <a href="https://github.com/preshing/CMakeDemo">CMakeDemo</a>’s <code>DEMO_ENABLE_MULTISAMPLE</code> option.</p>

                        <p><img class="center" src="./cmake/cmake-qt-run.png"></p>

                        <p>After that, you can build and run the project from Qt Creator’s menus or using the Shift+Ctrl+B or F5 shortcuts.</p>

                        <p>If you want to re-run CMake, for example to change the build type from Debug to RelWithDebInfo, navigate to Projects → Build &amp; Run → Build, then click “Run CMake”.</p>

                        <p><img class="center" src="./cmake/cmake-qt-project-mode.png"></p>

                        <p>The <a href="https://github.com/preshing/CMakeDemo">CMakeDemo</a> project contains a single executable target, but if your project contains multiple executable targets, you can tell Qt Creator which one to run by navigating to Projects → Build &amp; Run → Run and changing the “Run configuration” to something else. The drop-down list is automatically populated with a list of executable targets created by the build pipeline.</p>

                        <p><img class="center" src="./cmake/cmake-qt-run-config.png"></p>

                        <h2 id="other-cmake-features">Other CMake Features</h2>

                        <ul>
                            <li>You can perform a build from the command line, regardless of the generator used: <code>cmake --build . --target CMakeDemo --config Debug</code></li>
                            <li>You can create build pipelines that cross-compile for other environments with the help of the <code>CMAKE_TOOLCHAIN_FILE</code> variable.</li>
                            <li>You can generate a <code>compile_commands.json</code> file that can be fed to Clang’s <a href="https://clang.llvm.org/docs/LibTooling.html">LibTooling</a> library.</li>
                        </ul>

                        <p>I really appreciate how CMake helps integrate all kinds of C/C++ components and build them in all kinds of environments. It’s not without its flaws, but once you’re proficient with it, the open source world is your oyster, even when integrating non-CMake projects. My next post will be a crash course in CMake’s scripting language.</p>

                        <p><a href="https://www.amazon.com/gp/product/1930934319?ie=UTF8&amp;tag=preshonprogr-20&amp;camp=1789&amp;linkCode=xm2&amp;creativeASIN=1930934319"><img class="right" src="./cmake/mastering-cmake.png"></a>If you wish to become a power user, and don’t mind forking over a few bucks, the authors’ book <a href="https://www.amazon.com/gp/product/1930934319?ie=UTF8&amp;tag=preshonprogr-20&amp;camp=1789&amp;linkCode=xm2&amp;creativeASIN=1930934319">Mastering CMake</a> offers a big leap forward. Their article in <a href="http://aosabook.org/en/cmake.html">The Architecture of Open Source Applications</a> is also an interesting read.</p>
                    </div>





                    <footer>
                        <p class="meta">

                            <a class="basic-alignment left" href="https://preshing.com/20160726/using-quiescent-states-to-reclaim-memory" title="Previous Post: Using Quiescent States to Reclaim Memory">« Using Quiescent States to Reclaim Memory</a>


                            <a class="basic-alignment right" href="https://preshing.com/20170522/learn-cmakes-scripting-language-in-15-minutes" title="Next Post: Learn CMake&#39;s Scripting Language in 15 Minutes">Learn CMake's Scripting Language in 15 Minutes »</a>

                        </p>
                    </footer>
                </article>



            </div>



        </div>
    </div>
    <footer role="contentinfo">
        <p>
            Copyright © 2020 Jeff Preshing -
            <span class="credit">Powered by <a href="http://octopress.org/">Octopress</a></span>
        </p>

    </footer>










</body>

</html>
