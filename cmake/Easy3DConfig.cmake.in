# ******************************************************************************
#      Copyright (C) 2015 Liangliang Nan <liangliang.nan@gmail.com>
#      https://3d.bk.tudelft.nl/liangliang/
#
#      This file is part of Easy3D. If it is useful in your research/work,
#      I would be grateful if you show your appreciation by citing it:
#      ------------------------------------------------------------------
#           Liangliang Nan.
#           Easy3D: a lightweight, easy-to-use, and efficient C++ library
#           for processing and rendering 3D data.
#           Journal of Open Source Software, 6(64), 3255, 2021.
#      ------------------------------------------------------------------
#
#      Easy3D is free software; you can redistribute it and/or modify
#      it under the terms of the GNU General Public License Version 3
#      as published by the Free Software Foundation.
#
#      Easy3D is distributed in the hope that it will be useful,
#      but WITHOUT ANY WARRANTY; without even the implied warranty of
#      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#      GNU General Public License for more details.
#
#      You should have received a copy of the GNU General Public License
#      along with this program. If not, see <http://www.gnu.org/licenses/>.
# ******************************************************************************

# - Config file for the Easy3D package
#
# It defines the following variables:
#       Easy3D_INCLUDE_DIRS         - the include directories for Easy3D
#       Easy3D_AVAILABLE_LIBRARIES  - all available (but may no be requested) Easy3D libraries
#       Easy3D_LIBRARIES            - the found Easy3D libraries
#       Easy3D_CGAL_SUPPORT         - whether CGAL support is enabled
#       Easy3D_FFMPEG_SUPPORT       - whether FFMPEG support is enabled
# NOTE: The recommended way to specify libraries and headers with CMake is to use the
#       target_link_libraries command. This command automatically adds appropriate include
#       directories, compile definitions, the position-independent-code flag, and links to
#       requested libraries.

if(POLICY CMP0057)
  cmake_policy(SET CMP0057 NEW) # support the use of "IN_LIST"
endif()

include(CMakeFindDependencyMacro)
find_dependency(Threads)

# Compute paths
get_filename_component(Easy3D_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

set(Easy3D_INCLUDE_DIRS "@CONF_INCLUDE_DIRS@")
message(STATUS "Easy3D_INCLUDE_DIRS: ${Easy3D_INCLUDE_DIRS}")

set(Easy3D_AVAILABLE_LIBRARIES "@CONF_Easy3D_LIBRARIES@")
set(Easy3D_LIBRARIES "")
set(Easy3D_MISSING_LIBRARIES "")

foreach(__Easy3D_component ${Easy3D_FIND_COMPONENTS})
  if(NOT __Easy3D_component MATCHES "^easy3d::")
    set(__Easy3D_component easy3d::${__Easy3D_component})
  endif()
    if (__Easy3D_component IN_LIST Easy3D_AVAILABLE_LIBRARIES)
        list(APPEND Easy3D_LIBRARIES ${__Easy3D_component})
    else ()
        list(APPEND Easy3D_MISSING_LIBRARIES ${__Easy3D_component})
    endif ()
endforeach()

if (NOT Easy3D_LIBRARIES) # if no component has been requested, then the user wants all
    set(Easy3D_LIBRARIES ${Easy3D_AVAILABLE_LIBRARIES})
    message(WARNING "You did not explicitly request any Easy3D component, so Easy3D assumes you need all the available "
                    "Easy3D components, i.e., ${Easy3D_AVAILABLE_LIBRARIES}. It is highly recommended "
                    "to request only the necessary Easy3D components")
else ()
    message(STATUS "Found Easy3D components: ${Easy3D_LIBRARIES}")
endif ()

if (Easy3D_MISSING_LIBRARIES)
    message(FATAL_ERROR "Could not find the following Easy3D components: ${Easy3D_MISSING_LIBRARIES}. \n"
                        "Make sure the requested components have been built and their names are correct. \n"
                        "The full list of available Easy3D components are: ${Easy3D_AVAILABLE_LIBRARIES}")
endif ()

message(STATUS "Easy3D_LIBRARIES: ${Easy3D_LIBRARIES}")

# Resolve dependencies for CGAL
if ("easy3d::algo_ext" IN_LIST Easy3D_LIBRARIES) # second arg is the CMake variable name (instead of value)
    set (Easy3D_CGAL_SUPPORT TRUE)
    message(STATUS "Easy3D_CGAL_SUPPORT: ${Easy3D_CGAL_SUPPORT} (Easy3D was built with CGAL-v@CGAL_VERSION@)")
    find_dependency(CGAL QUIET)
    if (NOT CGAL_FOUND)
        message(FATAL_ERROR "You have requested easy3d::algo_ext. easy3d::algo_ext depends on and was built with "
                            "CGAL-v@CGAL_VERSION@ but CGAL was not found. Please make sure CGAL exists and set "
                            "'CGAL_DIR' to the CGAL directory containing `CGALConfig.cmake` or `cgal-config.cmake`, "
                            "which can help CMake find CGAL.")
    endif()
else()
    set (Easy3D_CGAL_SUPPORT FALSE)
    message(STATUS "Easy3D_CGAL_SUPPORT: ${Easy3D_CGAL_SUPPORT} (Easy3D was built without CGAL support)")
endif()

if ("easy3d::video" IN_LIST Easy3D_LIBRARIES) # second arg is the CMake variable name (instead of value)
    set (Easy3D_FFMPEG_SUPPORT TRUE)
    #include(@Easy3D_ROOT@/cmake/FindFFMPEG.cmake)
    message(STATUS "Easy3D_FFMPEG_SUPPORT: ${Easy3D_FFMPEG_SUPPORT} (Easy3D was built with FFMPEG support)")
else()
    set (Easy3D_FFMPEG_SUPPORT FALSE)
    message(STATUS "Easy3D_FFMPEG_SUPPORT: ${Easy3D_FFMPEG_SUPPORT} (Easy3D was built without FFMPEG support)")
endif()

# Our library dependencies (contains definitions for IMPORTED targets)
if(NOT TARGET easy3d_util AND
   NOT TARGET easy3d_core AND
   NOT TARGET easy3d_kdtree AND
   NOT TARGET easy3d_algo AND
   NOT TARGET easy3d_algo_ext AND
   NOT TARGET easy3d_video AND
   NOT TARGET easy3d_fileio AND
   NOT TARGET easy3d_renderer AND
   NOT TARGET easy3d_gui AND
   NOT TARGET easy3d_viewer AND
   NOT Easy3D_BINARY_DIR)
  include("${Easy3D_CMAKE_DIR}/Easy3DTargets.cmake")
endif()